{"version":3,"sources":["ui/globalComponent/Notifications.js","ui/admin/AdminEMails/AdminEMails.js"],"names":["__webpack_require__","d","__webpack_exports__","Notification","addNotification","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_notifications_component__WEBPACK_IMPORTED_MODULE_1__","react_notifications_component__WEBPACK_IMPORTED_MODULE_1___default","props","a","createElement","type","title","message","store","insert","container","animationIn","animationOut","dismiss","duration","onScreen","AdminEmails","_this","Object","C_Users_User_Desktop_Web_projects_Entre_cops_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","C_Users_User_Desktop_Web_projects_Entre_cops_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","C_Users_User_Desktop_Web_projects_Entre_cops_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","handleInputChange","e","value","target","name","selectedUsers","state","includes","users","filter","user","setState","concat","C_Users_User_Desktop_Web_projects_Entre_cops_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","C_Users_User_Desktop_Web_projects_Entre_cops_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","onEditorStateChange","editorState","content","draftToHtml","convertToRaw","getCurrentContent","sendEmails","_this$state","object","length","sending","emails","trim","axios","post","html","JSON","stringify","then","res","showModal","emailError","catch","err","console","log","selectAllUsers","inputClass","toggleBtn","usersCheckboxToggleAll","document","getElementsByClassName","usersCheckboxes","checked","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","input","push","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","_iterator2","suppliers","loading","error","EditorState","createEmpty","onChange","_this2","get","data","_this3","_this$state2","react__WEBPACK_IMPORTED_MODULE_7___default","_globalComponent_Hoc__WEBPACK_IMPORTED_MODULE_18__","_globalComponent_Notifications__WEBPACK_IMPORTED_MODULE_9__","className","react_bootstrap__WEBPACK_IMPORTED_MODULE_14__","defaultActiveKey","id","react_bootstrap__WEBPACK_IMPORTED_MODULE_15__","eventKey","_globalComponent_Loader__WEBPACK_IMPORTED_MODULE_17__","map","i","key","scope","email","supplier","onClick","react_bootstrap__WEBPACK_IMPORTED_MODULE_16__","show","onHide","size","Header","closeButton","Title","Body","for","placeholder","required","react_draft_wysiwyg__WEBPACK_IMPORTED_MODULE_10__","wrapperClassName","editorClassName","toolbarClassName","color","Component"],"mappings":"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","file":"static/js/39.6a1040b6.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactNotification from 'react-notifications-component'\r\nimport 'react-notifications-component/dist/theme.css'\r\nimport 'animate.css/animate.css'\r\nimport { store } from 'react-notifications-component';\r\n\r\nexport const Notification = (props) => {\r\n    return (\r\n        <ReactNotification />\r\n    )\r\n};\r\n\r\nexport const addNotification = (type, title, message) => {\r\n    store.addNotification({\r\n        title: title,\r\n        message: message,\r\n        type: type,\r\n        insert: \"top\",\r\n        container: \"top-center\",\r\n        animationIn: [\"animated\", \"bounceIn\"],\r\n        animationOut: [\"animated\", \"fadeOut\"],\r\n        dismiss: {\r\n            duration: 4000,\r\n            onScreen: false\r\n        }\r\n    });\r\n} ","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Notification, addNotification } from '../../globalComponent/Notifications'\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport { EditorState, convertToRaw } from 'draft-js';\r\nimport draftToHtml from 'draftjs-to-html';\r\n\r\nimport { Tab, Tabs, Modal } from 'react-bootstrap';\r\nimport Loader from '../../globalComponent/Loader';\r\nimport Hoc from '../../globalComponent/Hoc';\r\n\r\n\r\nclass AdminEmails extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            users: [],\r\n            suppliers: [],\r\n            loading: true,\r\n            sending: false,\r\n            selectedUsers: [],\r\n            content: '',\r\n            object: '',\r\n            error: '',\r\n            emailError: '',\r\n            editorState: EditorState.createEmpty(),\r\n        };\r\n        this.onChange = (editorState) => this.setState({ editorState });\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n        if(e.target.type === \"checkbox\") {\r\n            const {selectedUsers} = this.state;\r\n            if(selectedUsers.includes(value)) {\r\n                let users = selectedUsers.filter(user => (user !== value))\r\n                this.setState({selectedUsers: users});\r\n            } else {\r\n                this.setState(state => ({selectedUsers: [...state.selectedUsers, value]}));\r\n            }\r\n        } else {\r\n            this.setState({[name]: value});\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        //get user list\r\n        axios.get('/api/user')\r\n        .then(res => {\r\n            this.setState({loading: false, users: res.data.users, error: ''})\r\n        })\r\n        .catch(err => {\r\n            this.setState({loading: false,  error: 'Erreur, Veuillez reéssayer'})\r\n        })\r\n        //get suoolier list\r\n        axios.get('/api/supplier/all')\r\n        .then(res => {\r\n            this.setState({loading: false, suppliers: res.data.suppliers, error: ''})\r\n        })\r\n        .catch(err => {\r\n            this.setState({loading: false,  error: 'Erreur, Veuillez reéssayer'})\r\n        })\r\n    }\r\n\r\n    onEditorStateChange = (editorState) => {\r\n        this.setState({\r\n            editorState,\r\n            content: draftToHtml(convertToRaw(editorState.getCurrentContent()))\r\n        });\r\n    };\r\n\r\n    sendEmails = () => {\r\n        const {object, content, selectedUsers} = this.state;\r\n        if(object.length <= 0 || content.length <= 0 || selectedUsers.length === 0 ) {\r\n            addNotification(\"warning\", \"Envoi des Emails!\", \"Selectionez des utilisateurs et remplissez tous les champs\")\r\n        } else {\r\n            this.setState({ sending: true })\r\n            let emails = selectedUsers.filter(user => user.trim().length > 0);\r\n            // Envoi des Emails avec AWS SES\r\n           /*  \r\n            axios.post('/api/email/sendemail', {\r\n                object: object,\r\n                emails: emails,\r\n                html: JSON.stringify(content)\r\n            })\r\n            .then(res => {\r\n                this.setState({ sending: false, showModal: false })\r\n            })\r\n            .catch(err => {\r\n                this.setState({ sending: false, emailError: \"Une érreur ss'est produite\" })\r\n                console.log(err)\r\n            }) */\r\n            // Sending with gmail\r\n            axios.post('/api/email/sendemail/gmail', {\r\n                object: object,\r\n                emails: emails,\r\n                html: JSON.stringify(content)\r\n            })\r\n            .then(res => {\r\n                this.setState({ sending: false, showModal: false, emailError: '', content: '', object: '', selectedUsers: [] })\r\n                addNotification(\"success\", \"Envoi des Emails!\", \"Emails envoyés avec succès\")\r\n            })\r\n            .catch(err => {\r\n                this.setState({ sending: false, emailError: \"Une érreur ss'est produite\" })\r\n                console.log(err)\r\n            })\r\n        }\r\n    }\r\n\r\n    selectAllUsers = (e, inputClass, toggleBtn) => {\r\n        let usersCheckboxToggleAll = document.getElementsByClassName(toggleBtn)\r\n        let usersCheckboxes = document.getElementsByClassName(inputClass)\r\n        if(usersCheckboxToggleAll[0].checked) {\r\n            let users = [];\r\n            for (const input of usersCheckboxes) {\r\n                input.checked = true\r\n                users.push(input.value)\r\n            }\r\n            this.setState({selectedUsers: [...this.state.selectedUsers, ...users]})\r\n        } else {\r\n            let users = [...this.state.selectedUsers]\r\n            for (const input of usersCheckboxes) {\r\n                input.checked = false;\r\n                users = users.filter(user => (user !== input.value))\r\n            }\r\n            this.setState({selectedUsers: users})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { loading, users, suppliers, error, selectedUsers, object, sending, emailError, editorState} = this.state;\r\n        return (\r\n            <Hoc>\r\n                <Notification />\r\n                <div className=\"container mt-4\">\r\n                    <div className=\"row pt-5 pb-3\">\r\n                        <div className=\"col-sm-12\">\r\n                            {error && error.length ? <div className=\"alert alert-danger\">{error}</div> : null}\r\n                        </div>\r\n                        <div className=\"col-sm-12\">\r\n                            <Tabs defaultActiveKey=\"users\" id=\"uncontrolled-tab-example\">\r\n                                <Tab eventKey=\"users\" title=\"Utilisateurs\">\r\n                                    {\r\n                                        loading ? <div className=\"col-sm-12\"><div className=\"d-flex justify-content-center mt-5\"><Loader /></div></div> :\r\n                                            <Hoc>\r\n                                                <div className=\"col-sm-12 user-list\">\r\n                                                    <table className=\"table table-bordered reservations-list\">\r\n                                                        <thead className=\"thead-inverse thead-dark\">\r\n                                                            <tr>\r\n                                                                <th>#</th>\r\n                                                                <th>Nom</th>\r\n                                                                <th>Email</th>\r\n                                                                <th>Actions <input onChange={(e) => this.selectAllUsers(e, \"user-check\", \"user-check-verify\")} type=\"checkbox\" className=\"form-check-inline user-check-verify\" /></th>\r\n                                                            </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                            {\r\n                                                                users.map((user, i) => (\r\n                                                                    <tr key={i}>\r\n                                                                        <th scope=\"row\">{i + 1}</th>\r\n                                                                        <td>{user.name}</td>\r\n                                                                        <td>{user.email}</td>\r\n                                                                        <td><input onChange={(e) => this.handleInputChange(e)} type=\"checkbox\" className=\"form-check-inline user-check\" value={user.email} /></td>\r\n                                                                    </tr>\r\n                                                                ))\r\n                                                            }\r\n                                                        </tbody>\r\n                                                    </table>\r\n                                                </div>\r\n                                            </Hoc>\r\n                                    }\r\n                                </Tab>\r\n                                <Tab eventKey=\"suppliers\" title=\"Fournisseurs\">\r\n                                    {\r\n                                        loading ? <div className=\"col-sm-12\"><div className=\"d-flex justify-content-center mt-5\"><Loader /></div></div> :\r\n                                            <Hoc>\r\n                                                <div className=\"col-sm-12 supplier-list\">\r\n                                                    <table className=\"table table-bordered reservations-list\">\r\n                                                        <thead className=\"thead-inverse thead-dark\">\r\n                                                            <tr>\r\n                                                                <th>#</th>\r\n                                                                <th>Nom</th>\r\n                                                                <th>Email</th>\r\n                                                                <th>Actions <input onChange={(e) => this.selectAllUsers(e, \"supplier-check\", \"supplier-check-verify\")} type=\"checkbox\" className=\"form-check-inline supplier-check-verify\" /></th>\r\n                                                            </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                            {\r\n                                                                suppliers.map((supplier, i) => (\r\n                                                                    <tr key={i}>\r\n                                                                        <th scope=\"row\">{i + 1}</th>\r\n                                                                        <td>{supplier.name}</td>\r\n                                                                        <td>{supplier.email}</td>\r\n                                                                        <td><input onChange={(e) => this.handleInputChange(e)} type=\"checkbox\" className=\"form-check-inline supplier-check\" name={supplier.email} value={supplier.email} /></td>\r\n                                                                    </tr>\r\n                                                                ))\r\n                                                            }\r\n                                                        </tbody>\r\n                                                    </table>\r\n                                                </div>\r\n                                            </Hoc>\r\n                                    }\r\n                                </Tab>\r\n                            </Tabs>\r\n                            <button onClick={() => this.setState({ showModal: true })} className=\"button send-email-btn\">Envoyer un Email ({this.state.selectedUsers.length})</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Envoyer les mail */}\r\n                <Modal show={this.state.showModal} onHide={() => this.setState({showModal: !this.state.showModal})} size=\"lg\" >\r\n                    <Modal.Header closeButton>\r\n                    <Modal.Title>Envoi du mail</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                               <div className=\"col-sm-12\">\r\n                                    {emailError && emailError.length ? <div className=\"alert alert-danger\">{emailError}</div> : null}\r\n                                    <div className=\"d-flex mb-4 flex-wrap\">\r\n                                        {\r\n                                            selectedUsers.map((user, i) => <p className=\"user-email-item\" key={i}>{user}</p>)\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"name\">Objet</label><br/>\r\n                                        <input  type=\"text\" className=\"form-control\" value={object} onChange={(e) => this.handleInputChange(e)} name=\"object\" placeholder=\"Objet\" required />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"name\">Contenu</label>\r\n                                        {/* <CKEditor\r\n                                            editor={ClassicEditor}\r\n                                            data=\"\"\r\n                                            config={{\r\n                                                toolbar: ['heading', '|', 'bold', 'italic', 'insertTable',\r\n                                                    'tableColumn', 'tableRow', 'mergeTableCells', '|', 'undo', 'redo']\r\n                                            }} \r\n                                            onInit={editor => {\r\n                                            }}\r\n                                            onChange={(event, editor) => {\r\n                                                const data = editor.getData();\r\n                                                this.setState({content: data})\r\n                                            }}\r\n                                            onBlur={(event, editor) => {\r\n                                            }}\r\n                                            onFocus={(event, editor) => {\r\n                                            }}\r\n                                        /> */}\r\n                                        <Editor\r\n                                            editorState={editorState}\r\n                                            wrapperClassName=\"wrapper-class\"\r\n                                            editorClassName=\"editor-class\"\r\n                                            toolbarClassName=\"toolbar-class\"\r\n                                            onEditorStateChange={this.onEditorStateChange}\r\n                                        />\r\n                                        {/* <textarea style={{fontSize: \"1.5rem\"}} type=\"text\" className=\"form-control\" value={content} onChange={(e) => this.handleInputChange(e)} name=\"content\" rows={5} placeholder=\"Contenu de l'email\"></textarea> */}\r\n                                    </div>\r\n                                    <div className=\"d-flex justify-content-end\">\r\n                                        <button onClick={this.sendEmails} className=\"button my-4\">Envoyer ({selectedUsers.length}) {sending&&<Loader color=\"white\"/>}</button>\r\n                                    </div>\r\n                               </div>\r\n                            </div>\r\n                        </div>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Hoc>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminEmails;"],"sourceRoot":""}